/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        left_bootloader {
            bindings = <&bootloader>;
            key-positions = <0 38 24 36>;
        };

        left_reset {
            bindings = <&sys_reset>;
            key-positions = <0 5 38 36 24 29>;
        };

        right_bootloader {
            bindings = <&bootloader>;
            key-positions = <39 41 11 35>;
        };

        right_reset {
            bindings = <&sys_reset>;
            key-positions = <6 30 39 41 11 35>;
        };
    };

    macros {
        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LGUI &kp C>;
            label = "COPY";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RCMD &kp V>;
            label = "PASTE";
        };
    };

    behaviors {
        left_hrm: left_hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            hold-trigger-on-release;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <39 40 41 30 18 19 20 21 22 23 30 31 32 33 34 35 6 7 8 9 10 11 36 37 38>;
        };

        right_hrm: right_hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <37 38 39 40 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 41>;
        };

        left_shift_hrm: left_shift_hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_SHIFT_HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <100>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <39 40 41 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
        };

        right_shift_hrm: right_shift_hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_SHIFT_HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <100>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwerty_layer {
            bindings = <
&kp TAB     &kp Q                 &kp W                 &kp E                     &kp R                         &kp T           &kp Y                              &kp U                           &kp I                               &kp O                  &kp P                     &kp BACKSPACE
&kp ESCAPE  &left_hrm LEFT_ALT A  &left_hrm LEFT_GUI S  &left_hrm LEFT_CONTROL D  &left_shift_hrm LEFT_SHIFT F  &kp G           &kp H                              &right_shift_hrm RIGHT_SHIFT J  &right_hrm RIGHT_CONTROL K          &right_hrm LEFT_GUI L  &right_hrm LEFT_ALT SEMI  &lt 3 SQT
&kp GLOBE   &kp Z                 &kp X                 &kp C                     &kp V                         &kp B           &kp N                              &kp M                           &kp COMMA                           &kp DOT                &kp FSLH                  &kp ENTER
                                                        &left_hrm LGUI TAB        &lt 1 SPACE                   &lt 4 ESCAPE    &right_hrm RA(RS(RC(RCMD))) ENTER  &lt 2 SPACE                     &right_hrm RA(RS(RCTRL)) BACKSPACE
            >;
        };

        symbol_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp TILDE  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH   &trans    &trans    &kp UNDER  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PLUS      &trans
&trans     &trans     &kp DOLLAR       &kp PERCENT   &kp CARET  &trans    &kp PIPE  &kp MINUS  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp EQUAL     &kp BACKSLASH
&trans     &trans     &kp AMPERSAND    &kp ASTERISK  &trans     &trans    &trans    &kp SLASH  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp QUESTION  &trans
                                       &trans        &trans     &trans    &trans    &trans     &trans
            >;
        };

        num_nav_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp PAGE_UP      &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE  &trans
&trans  &trans  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PAGE_DOWN    &kp LEFT              &kp DOWN              &kp UP             &kp RIGHT        &trans      &trans
&trans  &trans  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans           &trans                &kp C_PREVIOUS        &kp C_PLAY_PAUSE   &kp C_NEXT       &trans      &trans
                              &kp NUMBER_0  &trans        &trans           &trans                &trans                &trans
            >;
        };

        function_layer {
            bindings = <
&kp F1          &kp F2        &kp F3        &kp F4        &kp F5        &kp F6          &kp F7      &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&out OUT_TOG    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans      &trans  &trans  &trans   &trans   &trans
&studio_unlock  &trans        &trans        &trans        &trans        &trans          &bt BT_CLR  &trans  &trans  &trans   &trans   &trans
                                            &trans        &trans        &trans          &trans      &trans  &trans
            >;
        };

        mouse_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans          &mkp LCLK       &mkp RCLK     &trans           &trans  &trans
                        &trans  &trans  &trans    &trans          &trans          &trans
            >;
        };
    };
};
