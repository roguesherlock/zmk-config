/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    combos {
        compatible = "zmk,combos";

        left_bootloader {
            bindings = <&bootloader>;
            key-positions = <0 38 24 36>;
        };

        left_reset {
            bindings = <&sys_reset>;
            key-positions = <0 5 38 36 24 29>;
        };

        right_bootloader {
            bindings = <&bootloader>;
            key-positions = <39 41 11 35>;
        };

        right_reset {
            bindings = <&sys_reset>;
            key-positions = <6 30 39 41 11 35>;
        };
    };

    macros {
        copy: copy {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LGUI &kp C>;
            label = "COPY";
        };

        paste: paste {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RCMD &kp V>;
            label = "PASTE";
        };
    };

    behaviors {
        left_hrm: left_hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            hold-trigger-on-release;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <39 40 41 30 18 19 20 21 22 23 30 31 32 33 34 35 6 7 8 9 10 11 36 37 38>;
        };

        right_hrm: right_hrm {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <37 38 39 40 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp TAB     &kp Q                 &kp W                 &kp E                     &kp R                   &kp T                  &kp Y                &kp U                     &kp I                           &kp O                   &kp P                      &kp BSPC
&kp ESCAPE  &left_hrm LEFT_ALT A  &left_hrm LEFT_GUI S  &left_hrm LEFT_CONTROL D  &left_hrm LEFT_SHIFT F  &kp G                  &kp H                &right_hrm RIGHT_SHIFT J  &right_hrm RIGHT_CONTROL K      &right_hrm RIGHT_GUI L  &right_hrm RIGHT_ALT SEMI  &lt 3 SQT
&kp LSHFT   &kp Z                 &kp X                 &kp C                     &kp V                   &kp B                  &kp N                &kp M                     &kp COMMA                       &kp DOT                 &kp FSLH                   &kp RIGHT_SHIFT
                                                        &mt LGUI TAB              &lt 1 SPACE             &mt LEFT_ALT ESCAPE    &mt RIGHT_ALT ENTER  &lt 2 SPACE               &right_hrm RIGHT_GUI BACKSPACE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB               &kp N1                &kp N2          &kp N3            &kp N4          &kp N5                 &kp N6               &kp N7             &kp N8          &kp N9           &kp N0             &kp BSPC
&kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT      &trans                 &kp LEFT             &kp DOWN           &kp UP          &kp RIGHT        &kp C_VOLUME_DOWN  &kp C_VOLUME_UP
&kp LSHFT             &trans                &trans          &kp C_AC_COPY     &kp C_AC_PASTE  &trans                 &kp LEFT_BRACKET     &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE  &trans             &trans
                                                            &kp LEFT_GUI      &trans          &mt LEFT_ALT ESCAPE    &mt RIGHT_ALT ENTER  &trans             &kp RIGHT_GUI
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BSPC |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH       &kp DLLR     &kp PRCNT              &kp CARET            &kp AMPS   &kp ASTRK      &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &kp PAGE_DOWN  &kp PAGE_UP  &trans                 &kp MINUS            &kp EQUAL  &kp LBKT       &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans         &trans       &trans                 &kp UNDER            &kp PLUS   &kp LBRC       &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI       &trans       &mt LEFT_ALT ESCAPE    &mt RIGHT_ALT ENTER  &trans     &kp RIGHT_GUI
            >;
        };

        function_layer {
            bindings = <
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6          &kp F7  &kp F8  &kp F9  &kp F10  &kp F11  &kp F12
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans   &trans   &trans
&trans      &out OUT_TOG  &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans   &trans   &trans
                                        &trans        &trans        &trans          &trans  &trans  &trans
            >;
        };
    };
};
